<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Body_length_indicator_mismatches_actual_body_length" xml:space="preserve">
    <value>The stream has advanced further than expected whilst reading the body stream; it may be invalid, malformed or corrupt.</value>
  </data>
  <data name="Data_corruption_with_current_position_only" xml:space="preserve">
    <value>The sequenced SHA-1 hash at byte position {0} is invalid; the event stream has suffered fatal data corruption.</value>
  </data>
  <data name="Data_corruption_with_previous_and_current_position" xml:space="preserve">
    <value>The sequenced SHA-1 hashes at byte positions {0} and {1} are not contiguous; the event stream has suffered fatal data corruption.</value>
  </data>
  <data name="Head_and_tail_indicators_mismatch" xml:space="preserve">
    <value>The head and tail record length values are different; the stream may be invalid, malformed or corrupt.</value>
  </data>
  <data name="Head_indicator_byte_not_present" xml:space="preserve">
    <value>The stream is not positioned at the start of a record as the head indicator byte is not present.</value>
  </data>
  <data name="Irreparable_corruption" xml:space="preserve">
    <value>The stream has suffered irreparable data corruption. Due to the type of corruption a repair was not possible.</value>
  </data>
  <data name="Seed_hash_injected_but_unexpected_number_of_written_bytes" xml:space="preserve">
    <value>The seed hash was injected but the number of bytes written does not match the number of bytes injected.</value>
  </data>
  <data name="Seed_hash_is_invalid_length" xml:space="preserve">
    <value>The seed hash is not of a valid length; it must be {0} bytes long.</value>
  </data>
  <data name="Tail_indicator_byte_not_present" xml:space="preserve">
    <value>The stream has reached the end of the current record but a tail indicator byte is not present.</value>
  </data>
  <data name="Tail_indicator_byte_not_present_while_backtracking" xml:space="preserve">
    <value>The buffer read from the stream does not end with a tail indicator byte; the stream appears to be invalid, malformed or corrupt.</value>
  </data>
  <data name="Truncation_corruption" xml:space="preserve">
    <value>The stream is in an abruptly truncated state starting at byte position {0}. This type of corruption is usually repairable and is typically caused by a system crash, power cut or any other situation where the program or operating system was interrupted during writing of the event stream.</value>
  </data>
  <data name="Unexpected_length_returned_from_stream_read_while_backtracking" xml:space="preserve">
    <value>An unexpected number of bytes were read from the stream. Expected {0}, but got {1}.</value>
  </data>
</root>